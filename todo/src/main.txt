#[macro_use] extern crate diesel;
#[macro_use] extern crate serde;
#[macro_use] extern crate chrono;
#[macro_use] extern crate tera;

mod api;
mod db;
mod model;
mod schema;
mod session;

use actix_web::{web, App, HttpResponse, HttpServer, Responder, Result, Error, error};
use listenfd::ListenFd;
use dotenv::dotenv;
use diesel::prelude::*;
use std::env;
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

fn index() -> impl Responder {
    HttpResponse::Ok().body("Hello World!")
}

fn hello(
    tmpl: web::Data<tera::Tera>,
    query: web::Query<HashMap<String, String>>,
) -> Result<HttpResponse, Error> {
    let s = if let Some(name) = query.get("name") {
        let mut ctx = tera::Context::new();
        ctx.insert("name", &name.to_owned());
        tmpl.render("hello.html", &ctx)
            .map_err(|_| error::ErrorInternalServerError("Template error"))?
    } else {
        tmpl.render("index.html", &tera::Context::new())
            .map_err(|_| error::ErrorInternalServerError("Template error"))?
    };
    Ok(HttpResponse::Ok().content_type("text/html").body(s))
}

pub fn establish_conn() -> MysqlConnection {
    dotenv().ok();

    let database_url = env::var("DATABASE_URL").expect("DATABASE_URL harus diset");
    MysqlConnection::establish(&database_url)
        .unwrap_or_else(|_| panic!("Error koneksi ke {}", database_url))
}

fn main() {
    std::env::set_var("RUST_LOG", "actix_web=info");
    env_logger::init();

    let mut listenfd = ListenFd::from_env();
    let mut server = HttpServer::new(|| {
        let tera = 
            compile_templates!(concat!(env!("CARGO_MANIFEST_DIR"), "/templates/**/*"));

        App::new()
            .data(tera)
            .route("/", web::get().to(index))
            .route("/hello", web::get().to(hello))
            .route("/todo", web::get().to(show_todos))
    });

    server = if let Some(l) = listenfd.take_tcp_listener(0).unwrap() {
        server.listen(l).unwrap()
    } else {
        server.bind("127.0.0.1:9088").unwrap()
    };
    
    server.run().unwrap();
}

fn show_todos() -> Result<HttpResponse> {
    use schema::todo::dsl::*;
    use models::todo::*;

    let conn = establish_conn();
    let result = todo
        // .filter(published.eq(1))
        .limit(5)
        .load::<Todo>(&conn)
        .expect("Error");

    Ok(HttpResponse::Ok().json(result))
}
